<launch>

	<arg name="quad" default="SQ01s"/>
  <arg name="perfect_controller" default="true"/>
  <arg name="perfect_prediction" default="true"/>
  <arg name="gui_mission" default="false"/>
  <arg name="rviz" default="true"/>
  <arg name="gazebo" default="true"/>
  <arg name="gzclient" default="false"/>
  <arg name="type_of_obst_traj" default="trefoil"/>   <!-- trefoil   eightCurve    square  epitrochoid  static -->
  <arg name="alpha_scale_obst_traj" default="2"/>   
  <arg name="beta_faster_obst_traj" default="0.666666666666666666666"/>   
 <!--  <arg name="mode" default="panther" />  --><!--  noPA (no_perception_aware), py (first_pos_then_yaw), panther (panther) ysweep (noPA but with sweep in yaw) -->
  <arg name="num_of_obs" default="2" />  <!--  Only one obstacle is supported right now -->
  <arg name="student_policy_path" default="$(find panther)/../panther_compression/trained_policies/intermediate_policy_round10_log0.pt" /> 
<!--   <arg name="student_policy_path" default="/home/jtorde/Dropbox (MIT)/Research/Planning_project/Deep_PANTHER/static_results/results_policies_and_MSE/Hung_epsilon_0.05.pt" />  -->
  <arg name="static_planning" default="false" />  <!-- #If true, it will always plan from the same initial condition -->

  <!-- ///////////////////////////////////////////////// -->
  <!-- ///////  PANTHER specific   //////////// -->
  <arg name="x" default="0" />
  <arg name="y" default="0" />
  <arg name="z" default="1.0" />
  <arg name="yaw" default="0.0" />

  <node ns="$(arg quad)" name="commands" pkg="panther" type="commands.py" output="screen"/>

  <group unless="$(arg perfect_prediction)">
    <include file="$(find panther)/launch/tracker_predictor.launch">
        <arg name="quad" value="$(arg quad)"/>
     </include> 
  </group>

    <!-- Spawn vehicle in Gazebo -->
    <group if="$(arg gazebo)">
        <include file="$(find panther_gazebo)/launch/spawn_quadrotor_with_asus.launch">
            <arg name="name" value="$(arg quad)"/>
            <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>
            <arg name="x" value="$(arg x)"/>
            <arg name="y" value="$(arg y)"/>
            <arg name="z" value="$(arg z)"/>
            <arg name="yaw" default="$(arg yaw)"/>
        </include>

        <node ns="$(arg quad)" name="publish_in_gazebo" pkg="panther" type="publish_in_gazebo.py" output="screen">
        </node>

    </group>

    <include file="$(find panther)/launch/static_transforms.launch">
    </include> 

    <group if="$(arg perfect_controller)">
      <node ns="$(arg quad)" name="perfect_controller" pkg="panther" type="perfect_controller.py" output="screen">
            <param name="x" value="$(arg x)"/>
            <param name="y" value="$(arg y)"/>
            <param name="z" value="$(arg z)"/>
            <param name="yaw" value="$(arg yaw)"/>
        </node>
    </group>

    <group unless="$(arg perfect_controller)">
        <include file="$(find snap_sim)/launch/sim.launch">
         </include> 
    </group>
  <!-- ///////////////////////////////////////////////// -->
  <!-- ///////////////////////////////////////////////// -->

  <!-- ///////////////////////////////////////////////// -->
  <!-- ///////  PANTHER general   //////////// -->

  <!-- Start Behaviour Selector-->
  <node pkg="behavior_selector" type="behavior_selector_node.py" name="behavior_selector" output="screen" />

  <group if="$(arg gazebo)">
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find panther)/meshes/empty.world"/>
      <arg name="gui" value="$(arg gzclient)"/> <!-- Set to false if you only want gzserver (and NOT gzclient) -->
    </include>
  </group>

  <!-- Disable, for instance, for ssh connections -->
  <group if="$(arg rviz)">
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find panther)/rviz_cfgs/panther.rviz"/>
  </group>

  <!-- Disable, for instance, for ssh connections -->
  <group if="$(arg gui_mission)"> 
    <node pkg="rqt_gui" type="rqt_gui" name="rqt_gui" args="--perspective-file $(find panther)/rqt_cfgs/demo_interface.perspective"/>
  </group>

  <!-- <group if="$(arg environment)"> -->
    <node name="dynamic_corridor" pkg="panther" type="dynamic_corridor.py" output="screen" args="--num_of_obs $(arg num_of_obs) --gazebo $(arg gazebo) --type_of_obst_traj $(arg type_of_obst_traj) --alpha_scale_obst_traj $(arg alpha_scale_obst_traj) --beta_faster_obst_traj $(arg beta_faster_obst_traj)"/> 
  <!-- </group>   -->

  <!-- ///////////////////////////////////////////////// -->
  <!-- ///////////////////////////////////////////////// -->
 

  <!-- ///////////////////////////////////////////////// -->
  <!-- ///////  PANTHER launch   //////////// -->

  <node ns="$(arg quad)" name="panther" pkg="panther" type="panther_node" output="screen" clear_params="false"> 

    <!-- Parameters -->
      <rosparam file="$(find panther)/param/panther.yaml" command="load"/>
      <rosparam file="$(find panther)/matlab/casadi_generated_files/params_casadi.yaml" command="load"/>
      <param name="gui_mission" value="$(arg gui_mission)" /> 
      <param name="perfect_prediction" value="$(arg perfect_prediction)" /> 
      <param name="student_policy_path" value="$(arg student_policy_path)" /> 
      <param name="static_planning" value="$(arg static_planning)" /> 
     <!--  <param name="mode" value="$(arg mode)" />  --><!-- noPA (no_perception_aware), py (first_pos_then_yaw), panther (panther) -->

        <!-- Subscriptions -->
    <remap from="~state" to="state"/>
    <remap from="~who_plans" to="who_plans"/>
    <remap from="~term_goal" to="term_goal" />
    <remap from="~trajs_predicted" to="tracker_predictor_node/trajs_predicted" />

    <!-- Publications -->
    <remap from="~traj" to="traj"/>
    <remap from="~trajs_zhejiang" to="trajs_zhejiang"/>
    <remap from="~goal" to="goal" />
    <remap from="~setpoint" to="setpoint" />

  </node>

  <!-- ///////////////////////////////////////////////// -->
  <!-- ///////////////////////////////////////////////// -->

<!--   <node ns="$(arg quad)" pkg="jsk_rviz_plugins"
        type="rosconsole_overlay_text.py"
        respawn="false"
        name="rosconsole_overlay_text">

        <param name="nodes" value="/$(arg quad)/panther" /> 
        <param name="reverse_lines" value="false" /> 

      </node> -->

<!-- Uncomment the part below to generate a camera from RViz -->
<!-- More info at https://roboticsknowledgebase.com/wiki/tools/stream-rviz/ -->

<!--   <group ns="camera1">
  <node pkg="tf" type="static_transform_publisher" name="camera_broadcaster"
      args="0.001 0 0 -1.57 0 -1.57 SQ01s camera1 10" />
  <node name="camera_info" pkg="rostopic" type="rostopic"
      args="pub camera_info sensor_msgs/CameraInfo
     '{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: 'camera1'},
      height: 480, width: 640, distortion_model: 'plumb_bob',
      D: [0],
      K: [500.0, 0.0, 320, 0.0, 500.0, 240.0, 0.0, 0.0, 1.0],
      R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
      P: [500.0, 0.0, 320, 0.0, 0.0, 500, 240, 0.0, 0.0, 0.0, 1.0, 0.0],
      binning_x: 0, binning_y: 0,
      roi: {x_offset: 0, y_offset: 0, height: 480, width: 640, do_rectify: false}}' -r 2"
      output="screen"/>
  </group>

  <group ns="rviz1/camera1/image">
  <rosparam param="disable_pub_plugins">
    - 'image_transport/compressed'
    - 'image_transport/compressedDepth'
    - 'image_transport/theora'
  </rosparam>
  </group> -->

</launch>
